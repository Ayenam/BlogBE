// <auto-generated />
using System;
using Blog.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240320011514_AddIdentityTables")]
    partial class AddIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog.Models.Post", b =>
                {
                    b.Property<int>("Unique_Id_Post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Unique_Id_Post"));

                    b.Property<string>("author_user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("last_modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_replies")
                        .HasColumnType("int");

                    b.HasKey("Unique_Id_Post");

                    b.ToTable("PostProperties");

                    b.HasData(
                        new
                        {
                            Unique_Id_Post = 1,
                            author_user_id = "mamaleone",
                            content = "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. ",
                            content_title = "REACT FRONT?",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(212),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(214),
                            post_replies = 0
                        },
                        new
                        {
                            Unique_Id_Post = 2,
                            author_user_id = "mamaleone",
                            content = "n looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. ",
                            content_title = "WORLD OF WARCRAFT BEST MMO",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(216),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(217),
                            post_replies = 0
                        },
                        new
                        {
                            Unique_Id_Post = 3,
                            author_user_id = "mamaleone",
                            content = "Itoking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. ",
                            content_title = "SOMETHING",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(220),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(221),
                            post_replies = 0
                        },
                        new
                        {
                            Unique_Id_Post = 4,
                            author_user_id = "razvan",
                            content = "Iis a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. ",
                            content_title = "WHY WHY WHY?",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(223),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(224),
                            post_replies = 0
                        },
                        new
                        {
                            Unique_Id_Post = 5,
                            author_user_id = "mamaleone",
                            content = "It is a long established fact that a reader will be distr ",
                            content_title = ".NET BLOG ?",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(226),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(227),
                            post_replies = 0
                        },
                        new
                        {
                            Unique_Id_Post = 6,
                            author_user_id = "adrian",
                            content = "It is a long es ",
                            content_title = "With whom should we use it?",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(229),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(230),
                            post_replies = 0
                        },
                        new
                        {
                            Unique_Id_Post = 7,
                            author_user_id = "adrian",
                            content = "Lalala",
                            content_title = "What is Lorem Impsum ?",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(232),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(233),
                            post_replies = 0
                        },
                        new
                        {
                            Unique_Id_Post = 8,
                            author_user_id = "razvan",
                            content = "Ce sa faci atunci cand te doare capul ?  ",
                            content_title = "Doare capul ?",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(235),
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(236),
                            post_replies = 0
                        });
                });

            modelBuilder.Entity("Blog.Models.PostReply", b =>
                {
                    b.Property<int>("PostReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostReplyId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("fatherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("last_modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("likes")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostReplyId");

                    b.HasIndex("PostId");

                    b.ToTable("PostReplyProperties");

                    b.HasData(
                        new
                        {
                            PostReplyId = 1,
                            PostId = 4,
                            content = " !!!!!!! CE TAREE EEEE!",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(262),
                            fatherId = 0,
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(265),
                            likes = 0,
                            username = "adrian"
                        },
                        new
                        {
                            PostReplyId = 2,
                            PostId = 2,
                            content = " haha, ce tare !",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(267),
                            fatherId = 0,
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(268),
                            likes = 0,
                            username = "adrian"
                        },
                        new
                        {
                            PostReplyId = 3,
                            PostId = 3,
                            content = " wow, incredibil",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(270),
                            fatherId = 0,
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(272),
                            likes = 1,
                            username = "razvan"
                        },
                        new
                        {
                            PostReplyId = 4,
                            PostId = 4,
                            content = " haha, senzational!",
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(274),
                            fatherId = 0,
                            last_modified = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(275),
                            likes = 1,
                            username = "raymond"
                        });
                });

            modelBuilder.Entity("Blog.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_Admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_online")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProperties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(33),
                            email = "raymond@yahoo.com",
                            is_Admin = true,
                            last_online = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(74),
                            password = "12345",
                            profile_description = "lalala 1 2 3",
                            username = "mamaleone"
                        },
                        new
                        {
                            Id = 2,
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(77),
                            email = "razvan@yahoo.com",
                            is_Admin = true,
                            last_online = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(78),
                            password = "1223",
                            profile_description = "razvan 1 2 3",
                            username = "razvan"
                        },
                        new
                        {
                            Id = 3,
                            created_at = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(81),
                            email = "adrian@yahoo.com",
                            is_Admin = false,
                            last_online = new DateTime(2024, 3, 20, 3, 15, 13, 547, DateTimeKind.Local).AddTicks(82),
                            password = "123456",
                            profile_description = "adrian 1 2 3",
                            username = "adrian"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Blog.Models.PostReply", b =>
                {
                    b.HasOne("Blog.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
